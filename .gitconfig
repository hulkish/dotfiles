[user]
	name = Steven Hargrove
	email = steven.hargrove@gmail.com
  # signingkey = 97267CD03818C4D1
[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	editor = vim
	eol = lf
	autocrlf = input
	pager = less -r
	trustctime = false
	precomposeunicode = false
[apply]
	whitespace = fix
[i18n]
	filesEncoding = utf-8
[http]
	sslVerify = false
[credential]
	helper = osxkeychain
[pull]
	default = matching
[push]
	default = matching
	followTags = true
[gpg]
  program = /usr/local/bin/gpg2
# [commit]
	# gpgsign = true
[merge]
	log = true
[diff]
	renames = copies
[diff "bin"]
	textconv = hexdump -v -C
[help]
	format = man
	info = web
	autocorrect = 1
[color]
	ui = auto
	branch = auto
	diff = auto
	interactive = auto
	status = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
# [url "https://github.com/"]
# 	insteadOf = git://github.com/
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[alias]
	# shows list of files that have a merge conflict
	conflicts = diff --name-only --diff-filter=U
	changes = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	unstage = reset HEAD --# unstages a file. use like 'git unstage filename'
	abort = reset --hard HEAD# resets all uncomitted changes and files
	new = diff --cached# shows diff only for files staged to commit
	undo = reset HEAD~1# undo last commit
	recommit = commit --amend# change last commit message
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
	d = diff --color-words
	fr = !git fetch --verbose --progress && git rebase --verbose
	sl = stash list
	sa = stash apply
	sp = stash pop
	ss = stash save
	r = reset
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard
	cp = cherry-pick
	st = status -s
	cl = clone
	ci = commit
	co = checkout
	br = branch
	diff = diff --word-diff
	dc = diff --cached
	grep = grep -Ii
	gr = grep -Ii
	f = "!git ls-files | grep -i"
	la = "!git config -l | grep alias | cut -c 7-"
	ltree = log --graph --full-history --all --color=auto --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"
	logmin = log --pretty=oneline --abbrev-commit
    bls = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
	ls = log --pretty=format:\"%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=short -10
	ll = log --pretty=format:\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --numstat -10
	ld = log --pretty=format:\"%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=relative -10
	le = log --oneline --decorate -10
	dlc = diff --cached HEAD^
	st = status -sb
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# logmin = log --pretty=oneline --abbrev-commit
	# ls = log --pretty=format:\"%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=short
	# ll = log --pretty=format:\"%C(yellow)%h%Cred%d\\\\ %Creset%s%Cblue\\\\ [%cn]\" --decorate --numstat
	# ld = log --pretty=format:\"%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=relative
	# le = log --oneline --decorate
	# dlc = diff --cached HEAD^
	# st = status -sb

